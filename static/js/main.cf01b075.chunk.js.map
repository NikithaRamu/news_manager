{"version":3,"sources":["components/Header.js","components/Footer.js","components/Card.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Footer","fixed","Card","props","newsItem","title","Body","Text","author","src","urlToImage","className","Button","onClick","readNewsLater","Dashboard","state","newsList","bind","console","log","fetch","then","resp","json","data","setState","method","headers","body","JSON","stringify","this","map","item","id","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kQAaeA,MAVf,WACI,OACI,6BACA,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACpB,kDCMCC,MAVf,WACI,OACI,6BACI,kBAACH,EAAA,EAAD,CAAQC,GAAG,OAAOG,MAAM,SAASF,QAAQ,QAC1C,6C,sDCeIG,MAlBf,SAAcC,GACV,OACI,6BACI,kBAACD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAMN,OAAP,KAAeO,EAAMC,SAASC,OAC9B,kBAACH,EAAA,EAAMI,KAAP,KAEI,kBAACJ,EAAA,EAAMK,KAAP,KAAaJ,EAAMC,SAASI,QAC5B,yBAAKC,IAAKN,EAAMC,SAASM,WAAYC,UAAU,YAG/C,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAKV,EAAMW,cAAcX,EAAMC,YAAhD,kBC8CLW,G,wDAtDX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,MAAQ,CACTC,SAAU,IAGd,EAAKH,cAAgB,EAAKA,cAAcI,KAAnB,gBANN,E,gEAUE,IAAD,OAChBC,QAAQC,IAAI,cAGZC,MAFY,sEAGPC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACF,EAAKC,SAAS,CACVT,SAASQ,IAEbN,QAAQC,IAAI,OAAO,EAAKJ,MAAMC,e,oCAM5BQ,GAIVN,QAAQC,IAAI,kBAAkBK,EAAKjB,QAEnCa,MADW,6BACD,CACNM,OAAO,OACPC,QAAQ,CACJ,OAAU,mBACX,eAAgB,oBAEnBC,KAAMC,KAAKC,UAAUN,O,+BAMnB,IAAD,OACL,OACI,6BACKO,KAAKhB,MAAMC,SAASgB,KAAI,SAACC,EAAKC,GAAN,OAAW,yBAAKxB,UAAU,OAAOyB,IAAKD,GAAI,kBAAC,EAAD,CAAOrB,cAAe,EAAKA,cAAcV,SAAU8B,a,GAjD9GG,cCeTC,MAZf,WACE,OACE,yBAAK3B,UAAU,OACd,kBAAC,EAAD,MACC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.cf01b075.chunk.js","sourcesContent":["import React from 'react';\r\nimport  Navbar from 'react-bootstrap/Navbar'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n              <h3>News Manger App</h3>\r\n            </Navbar>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport  Navbar from 'react-bootstrap/Navbar'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"dark\" fixed=\"bottom\" variant=\"dark\">\r\n           <h3>@Copyright</h3> \r\n        </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Card1 from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport '../App.css'\r\nfunction Card(props) {\r\n    return (\r\n        <div >\r\n            <Card1>\r\n                <Card1.Header>{props.newsItem.title}</Card1.Header>\r\n                <Card1.Body>\r\n\r\n                    <Card1.Text>{props.newsItem.author}</Card1.Text>\r\n                    <img src={props.newsItem.urlToImage} className=\"newsImg\"></img>\r\n                    {/* <Button variant=\"primary\">Go somewhere</Button> */}\r\n                    \r\n                    <Button onClick={()=>{props.readNewsLater(props.newsItem)}}>Read Later</Button>\r\n                </Card1.Body>\r\n            </Card1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from './Card'\r\nimport '../App.css'\r\nimport { throws } from 'assert';\r\n\r\nclass Dashboard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newsList: []\r\n        }\r\n\r\n        this.readNewsLater = this.readNewsLater.bind(this)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        console.log(\"i am mount\")\r\n        const url = \"https://my-json-server.typicode.com/NikithaRamu/first_api/articles\"\r\n\r\n        fetch(url)\r\n            .then(resp => resp.json())\r\n            .then(data =>{\r\n                this.setState({\r\n                    newsList:data\r\n                })\r\n                console.log(\"this\",this.state.newsList)\r\n            }\r\n            )\r\n            \r\n    }\r\n\r\n    readNewsLater(data){\r\n\r\n\r\n\r\n        console.log(\"read news later\",data.author)\r\n        const url ='http://localhost:3001/news'\r\n        fetch(url,{\r\n            method:\"POST\",\r\n            headers:{\r\n                'Accept': 'application/json',\r\n               'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.newsList.map((item,id)=><div className=\"test\" key={id}><Card  readNewsLater={this.readNewsLater}newsItem={item} /></div>)}\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Dashboard from './components/Dashboard'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Header/>\n      <Dashboard/>\n      <Footer/>  \n\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}